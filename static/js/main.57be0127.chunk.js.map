{"version":3,"sources":["components/TodoList/assets/TodoList.module.scss","components/ViewModeButtons/assets/ViewModeButtons.module.scss","components/TodoInput/assets/TodoInput.module.scss","vendor/Button/assets/Button.module.scss","App/assets/App.module.scss","store/WithTodoRedux/redux/const.js","store/WithTodoRedux/redux/reducer.js","store/reducer.js","store/index.js","store/WithTodoRedux/redux/action.js","store/WithTodoRedux/index.js","store/WithTodoRedux/components/WithTodoRedux.js","components/TodoInput/components/TodoInput.view.js","components/TodoInput/index.js","components/TodoInput/components/TodoInput.js","vendor/Button/index.js","vendor/Button/components/Button.js","components/TodoList/components/TodoList.View.js","components/TodoList/index.js","components/TodoList/components/TodoList.js","components/ViewModeButtons/components/ViewModeButtons.view.js","components/ViewModeButtons/index.js","components/ViewModeButtons/components/ViewModeButtons.js","theme/theme.js","theme/ThemeContext.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","TASK_STATUS","getCreatedTasks","_tasks","_content","tasks","initTask","id","Date","now","content","status","push","getRemovedTasks","_taskRemove","_","remove","task","getToggledTasks","_toggleTasks","map","includes","initState","viewMode","staticReducers","todo","state","action","type","assign","payload","createReducer","asyncReducers","combineReducers","createTask","dispatch","removeTask","_task","setTaskDone","setViewMode","_mode","toggleTasks","WithTodoRedux","WrappedComponent","HOC","this","props","React","Component","mapDispatchToProps","connect","Wrapper","styled","theme","text","inputBackground","TodoInputView","taskContent","handleChangeInput","handleKeyPressed","className","style","todoInput__container","todoInput__input","placeholder","value","onChange","onKeyPress","TodoInput","useState","setTaskContent","evt","target","key","Button","children","onClick","currentActive","active","button__item","ItemWrapper","TodoListView","displayTasks","toggleDisplayTasks","wrapper","TransitionGroup","CSSTransition","timeout","item","close_button","toggle_button","TodoList","setDisplayTasks","useEffect","tasksFiltered","filter","ViewModeButtonsView","showViewMode","Fragment","buttonFooter__container","buttonFooter__item","ViewModeButtons","ViewMode","themeLight","background","themeDark","mode","ThemeContext","createContext","dark","toggle","middleware","applyMiddleware","thunkMiddleware","persistConfig","storage","persistReducers","persistReducer","store","createStore","persistor","persistStore","injectReducer","asyncReducer","replaceReducer","configureStore","App","themeState","useContext","loading","app__container","Boolean","window","location","hostname","match","ReactDOM","render","hasThemeMounted","setThemeState","lsDark","localStorage","getItem","useEffectDarkMode","computedTheme","Provider","setItem","JSON","stringify","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57be0127.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoList_wrapper__IPpoY\",\"item\":\"TodoList_item__mvJmg\",\"content\":\"TodoList_content__2i1rB\",\"close_button\":\"TodoList_close_button__3zBr6\",\"done\":\"TodoList_done__Ipheo\",\"toggle_button\":\"TodoList_toggle_button__3lvRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonFooter__container\":\"ViewModeButtons_buttonFooter__container__1Yk3f\",\"buttonFooter__item\":\"ViewModeButtons_buttonFooter__item__1EXZW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput__container\":\"TodoInput_todoInput__container__2lDTt\",\"todoInput__input\":\"TodoInput_todoInput__input__2QQfS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button__item\":\"Button_button__item__2rOoK\",\"active\":\"Button_active__38pXY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__container\":\"App_app__container__kIKBa\"};","import _ from 'lodash'\r\n\r\nexport const CREATE_TASK = 'CREATE_TASK'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const SET_TASK_DONE = 'SET_TASK_DONE'\r\nexport const SET_VIEW_MODE = 'SET_VIEW_MODE'\r\nexport const TOGGLE_TASKS_STATUS = 'TOGGLE_TASKS_STATUS'\r\n\r\n\r\nexport const TASK_STATUS = {\r\n  all: 'all',\r\n  active: 'active',\r\n  done: 'done',\r\n}\r\n\r\n/**\r\n * Get Created Tasks\r\n * @param _tasks {Array} task list\r\n * @param _content {String} task content\r\n * @returns {Array} task list after created\r\n */\r\nexport const getCreatedTasks = (_tasks, _content) => {\r\n  let tasks = _tasks\r\n\r\n  //Init task\r\n  let initTask = {\r\n    id: Date.now(),\r\n    content: _content,\r\n    status: TASK_STATUS.active,\r\n  }\r\n\r\n  // Add new task to array\r\n  tasks.push(initTask);\r\n\r\n  return tasks\r\n}\r\n\r\n/**\r\n * Get Removed Tasks\r\n * @param _tasks {Array} task list\r\n * @param _taskRemove {Object} task will remove\r\n * @returns {Array} task list after removed\r\n */\r\nexport const getRemovedTasks = (_tasks, _taskRemove) => {\r\n  let tasks = _tasks\r\n\r\n  // Remove task in array\r\n  _.remove(tasks, task => task.id === _taskRemove.id)\r\n\r\n  return tasks\r\n}\r\n\r\n/**\r\n * Get Toggled Tasks\r\n * @param _tasks {Array} task list\r\n * @param _toggleTasks {Array} task list will toggle status\r\n * @returns {Array} task list after toggled\r\n */\r\nexport const getToggledTasks = (_tasks, _toggleTasks = []) => _.map(_tasks, task => {\r\n  // Check task exist at toggleTasks\r\n  if (_.includes(_toggleTasks, task)) {\r\n    // Toggle status\r\n    task.status = (task.status === TASK_STATUS.active) ? TASK_STATUS.done : TASK_STATUS.active\r\n  }\r\n\r\n  return task\r\n})\r\n","import _ from 'lodash'\r\nimport {\r\n  TASK_STATUS,\r\n  CREATE_TASK,\r\n  REMOVE_TASK,\r\n  SET_TASK_DONE,\r\n  SET_VIEW_MODE,\r\n  TOGGLE_TASKS_STATUS,\r\n  getCreatedTasks,\r\n  getRemovedTasks,\r\n  getToggledTasks,\r\n} from './const'\r\n\r\nconst initState = {\r\n  tasks: [],\r\n  viewMode: 'all',\r\n}\r\n\r\nexport default function TodoReducer (state = initState, action) {\r\n  let tasks = state.tasks\r\n\r\n  switch (action.type) {\r\n    case CREATE_TASK:\r\n      return _.assign({}, state, {tasks: getCreatedTasks(tasks, action.payload)})\r\n\r\n    case REMOVE_TASK:\r\n      return _.assign({}, state, {tasks: getRemovedTasks(tasks, action.payload)})\r\n\r\n    case SET_TASK_DONE:\r\n      tasks.map(task => {\r\n        if (task.id === action.payload.id) {\r\n          task.status = TASK_STATUS.done\r\n        }\r\n        return task\r\n      });\r\n      return _.assign({}, state, {tasks: tasks})\r\n\r\n    case SET_VIEW_MODE:\r\n      return _.assign({}, state, {viewMode: action.payload})\r\n\r\n    case TOGGLE_TASKS_STATUS:\r\n      return _.assign({}, state, {tasks: getToggledTasks(tasks, action.payload)})\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","// Define the Reducers that will always be present in the application\r\nimport TodoReducer from './WithTodoRedux/redux/reducer'\r\n\r\n\r\nexport const staticReducers = {\r\n  todo: TodoReducer,\r\n}\r\n","import {createStore, applyMiddleware, combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {persistStore, persistReducer} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport { staticReducers } from './reducer'\r\n\r\nconst _DEV_ = process.env.NODE_ENV === 'development'\r\n\r\n// Configure the store\r\nexport default function configureStore() {\r\n  let middleware = _DEV_\r\n  ? composeWithDevTools({ trace: true })(applyMiddleware(thunkMiddleware))\r\n  : applyMiddleware(thunkMiddleware)\r\n\r\n  const persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n  }\r\n  const persistReducers = persistReducer(persistConfig, createReducer())\r\n  const store = createStore(persistReducers, {}, middleware)\r\n  const persistor = persistStore(store)\r\n\r\n  // Add a dictionary to keep track of the registered async reducers\r\n  store.asyncReducers = {}\r\n\r\n  // Create an inject reducer function\r\n  // This function adds the async reducer, and creates a new combined reducer\r\n  store.injectReducer = (key, asyncReducer) => {\r\n    store.asyncReducers[key] = asyncReducer\r\n    store.replaceReducer(createReducer(store.asyncReducers))\r\n  }\r\n\r\n  // Return the modified store\r\n  return {store, persistor}\r\n}\r\n\r\nfunction createReducer(asyncReducers) {\r\n  return combineReducers({\r\n    ...staticReducers,\r\n    ...asyncReducers\r\n  })\r\n}\r\n","import {\r\n  CREATE_TASK,\r\n  REMOVE_TASK,\r\n  SET_TASK_DONE,\r\n  SET_VIEW_MODE,\r\n  TOGGLE_TASKS_STATUS,\r\n} from './const'\r\n\r\n/**\r\n * Add new task\r\n * @param _content {String} Content of task\r\n * @returns {Function}\r\n */\r\nexport const createTask = (_content) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: CREATE_TASK,\r\n      payload: _content,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Remove Task\r\n * @param _task {object}\r\n * @returns {Function}\r\n */\r\nexport const removeTask = (_task) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: REMOVE_TASK,\r\n      payload: _task,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Set task status to done\r\n * @param _task {object}\r\n * @returns {Function}\r\n */\r\nexport const setTaskDone = (_task) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: SET_TASK_DONE,\r\n      payload: _task,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Set View Mode\r\n * @param _mode {string} : key value of TASK_STATUS\r\n * @returns {Function}\r\n */\r\nexport const setViewMode = (_mode) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: SET_VIEW_MODE,\r\n      payload: _mode,\r\n    })\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Toggle task status : active <=> done\r\n * @param _tasks {array}\r\n * @returns {Function}\r\n */\r\nexport const toggleTasks = (_tasks) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: TOGGLE_TASKS_STATUS,\r\n      payload: _tasks,\r\n    })\r\n  }\r\n}\r\n\r\n","import WithTodoRedux from './components/WithTodoRedux'\r\nexport default WithTodoRedux\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n  createTask,\r\n  removeTask,\r\n  setTaskDone,\r\n  setViewMode,\r\n  toggleTasks,\r\n} from '../redux/action'\r\n\r\nconst withTodoRedux = (WrappedComponent) => {\r\n  class HOC extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <WrappedComponent\r\n          {...this.props}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  // Map redux\r\n  const mapPropToState = (state) => ({\r\n    todo: state.todo,\r\n  })\r\n\r\n  const mapDispatchToProps = {\r\n    createTask,\r\n    removeTask,\r\n    setTaskDone,\r\n    setViewMode,\r\n    toggleTasks,\r\n  }\r\n\r\n  return connect(mapPropToState, mapDispatchToProps)(HOC);\r\n}\r\n\r\nexport default withTodoRedux\r\n","import React from 'react'\r\nimport styled from '@emotion/styled';\r\n\r\nimport style from '../assets/TodoInput.module.scss'\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  input {\r\n    color: ${props => props.theme.text};\r\n    background: ${props => props.theme.inputBackground};\r\n  }\r\n`;\r\n\r\nconst TodoInputView = ({ taskContent, handleChangeInput, handleKeyPressed }) => {\r\n  return (\r\n    <Wrapper>\r\n      <div className={style.todoInput__container}>\r\n        <input\r\n          className={style.todoInput__input}\r\n          placeholder='Enter todo name here'\r\n          value={taskContent}\r\n          onChange={handleChangeInput}\r\n          onKeyPress={handleKeyPressed}\r\n        />\r\n      </div>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default TodoInputView\r\n","import TodoInput from './components/TodoInput'\r\nexport default TodoInput\r\n","import React, { useState } from 'react'\r\nimport WithTodoRedux  from '../../../store/WithTodoRedux'\r\n\r\nimport TodoInputView from './TodoInput.view'\r\n\r\nconst TodoInput = ({createTask}) => {\r\n  const [taskContent, setTaskContent] = useState('')\r\n\r\n  const handleKeyPressed = (evt) => {\r\n    // Catch press enter\r\n    if (evt.key === \"Enter\") {\r\n      createTask(taskContent);\r\n      setTaskContent('')\r\n    }\r\n  };\r\n\r\n  const handleChangeInput = (evt) => {\r\n    // Update taskContent input\r\n    setTaskContent(evt.target.value)\r\n  };\r\n\r\n  return (\r\n    <TodoInputView\r\n      taskContent={taskContent}\r\n      handleChangeInput={handleChangeInput}\r\n      handleKeyPressed={handleKeyPressed}\r\n    />\r\n  )\r\n};\r\n\r\nexport default WithTodoRedux(TodoInput);\r\n","import Button from './components/Button'\r\nexport default Button\r\n","import React  from 'react'\r\nimport style from '../assets/Button.module.scss';\r\n\r\nconst Button = ({children, onClick, currentActive, active, className}) => {\r\n  const handleClick = () => {\r\n    onClick(active)\r\n  }\r\n\r\n  return (\r\n    <div className={`${className} ${style.button__item} ${currentActive && currentActive === active && style.active}`}>\r\n      <button onClick={handleClick}>\r\n        {children}\r\n      </button>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Button\r\n","import React, { Fragment } from 'react'\r\nimport _ from 'lodash'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport styled from '@emotion/styled';\r\n\r\nimport Button from '../../../vendor/Button'\r\nimport style from '../assets/TodoList.module.scss'\r\n\r\nconst ItemWrapper = styled(\"div\")`\r\n  border-radius: 6px;\r\n  color: ${props => props.theme.text};\r\n  background: ${props => props.theme.inputBackground};\r\n`;\r\n\r\nconst TodoListView = ({displayTasks, removeTask, setTaskDone, toggleDisplayTasks}) => {\r\n  return (\r\n    <Fragment>\r\n      <div className={style.wrapper}>\r\n        <TransitionGroup>\r\n          {\r\n            _.map(displayTasks, (task =>\r\n              <CSSTransition\r\n                key={task.id}\r\n                timeout={250}\r\n              >\r\n                <ItemWrapper>\r\n                  <div className={`${style.item} ${style[task.status]}`}>\r\n                    <div className={style.content} onClick={() => setTaskDone(task)}>{task.content}</div>\r\n                    <Button className={style.close_button} onClick={() => removeTask(task)}>x</Button>\r\n                  </div>\r\n                </ItemWrapper>\r\n              </CSSTransition>\r\n            ))\r\n          }\r\n        </TransitionGroup>\r\n      </div>\r\n      <div>\r\n        <Button className={style.toggle_button} onClick={toggleDisplayTasks}>Toggle All</Button>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default TodoListView\r\n","import TodoList from './components/TodoList'\r\nexport default TodoList\r\n","import React, { useState, useEffect } from 'react'\r\nimport WithTodoRedux  from '../../../store/WithTodoRedux'\r\nimport { TASK_STATUS } from '../../../store/WithTodoRedux/redux/const'\r\nimport _ from 'lodash'\r\n\r\n// View\r\nimport TodoListView from './TodoList.View'\r\n\r\nconst TodoList = ({todo, removeTask, setTaskDone, toggleTasks}) => {\r\n  const [displayTasks, setDisplayTasks] = useState([])\r\n\r\n  // Effect when redux change\r\n  useEffect(() => {\r\n    if (todo.viewMode !== TASK_STATUS.all) {\r\n      // Filter task status = viewMode\r\n      const tasksFiltered = _.filter(todo.tasks, task => task.status === todo.viewMode)\r\n      setDisplayTasks(tasksFiltered)\r\n    } else {\r\n      // Show all tasks\r\n      setDisplayTasks(todo.tasks)\r\n    }\r\n  }, [todo])\r\n\r\n\r\n  // Toggle task status in display\r\n  const toggleDisplayTasks = () => {\r\n    toggleTasks(displayTasks)\r\n  }\r\n\r\n  return (\r\n    <TodoListView\r\n      displayTasks={displayTasks}\r\n      removeTask={removeTask}\r\n      setTaskDone={setTaskDone}\r\n      toggleDisplayTasks={toggleDisplayTasks}\r\n    />\r\n  )\r\n};\r\n\r\nexport default WithTodoRedux(TodoList)\r\n","import React from 'react'\r\nimport Button  from '../../../vendor/Button'\r\nimport { TASK_STATUS } from '../../../store/WithTodoRedux/redux/const'\r\nimport style from '../assets/ViewModeButtons.module.scss'\r\n\r\nconst ViewModeButtonsView = ({ viewMode, showViewMode }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className={style.buttonFooter__container}>\r\n\r\n        {/*Button All*/}\r\n        <Button\r\n          className={style.buttonFooter__item}\r\n          onClick={showViewMode}\r\n          currentActive={viewMode}\r\n          active={TASK_STATUS.all}\r\n        >All</Button>\r\n        {/*Button All - END*/}\r\n\r\n        {/*Button Active*/}\r\n        <Button\r\n          className={style.buttonFooter__item}\r\n          onClick={showViewMode}\r\n          currentActive={viewMode}\r\n          active={TASK_STATUS.active}\r\n        >Active</Button>\r\n        {/*Button Active - END*/}\r\n\r\n        {/*Button Done*/}\r\n        <Button\r\n          className={style.buttonFooter__item}\r\n          onClick={showViewMode}\r\n          currentActive={viewMode}\r\n          active={TASK_STATUS.done}\r\n        >Done</Button>\r\n        {/*Button Done - END*/}\r\n\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default ViewModeButtonsView\r\n","import ViewModeButtons from './components/ViewModeButtons'\r\nexport default ViewModeButtons\r\n","import React from 'react'\r\nimport WithTodoRedux  from '../../../store/WithTodoRedux'\r\nimport ViewModeButtonsView from './ViewModeButtons.view';\r\n\r\nconst ViewModeButtons = ({todo, setViewMode}) => {\r\n  const showViewMode = (ViewMode) => {\r\n    setViewMode(ViewMode)\r\n  }\r\n\r\n  return (\r\n    <ViewModeButtonsView\r\n      viewMode={todo.viewMode}\r\n      showViewMode={showViewMode}\r\n    />\r\n  )\r\n};\r\n\r\nexport default WithTodoRedux(ViewModeButtons)\r\n","const white = \"#FFFFFF\";\nconst black = \"#161617\";\nconst gray = \"#D6EAF8\";\nconst darkslategray = \"#2F4F4F\";\n\nconst themeLight = {\n  background: gray,\n  text: black,\n  inputBackground: white,\n};\n\nconst themeDark = {\n  background: black,\n  text: white,\n  inputBackground: darkslategray,\n};\n\nconst theme = mode => (mode === \"dark\" ? themeDark : themeLight);\n\nexport default theme;\n","import React from \"react\";\nimport { ThemeProvider as EmotionThemeProvider } from \"emotion-theming\";\nimport theme from \"./theme.js\";\n\nconst defaultContextData = {\n  dark: false,\n  toggle: () => {}\n};\n\nconst ThemeContext = React.createContext(defaultContextData);\nconst useTheme = () => React.useContext(ThemeContext);\n\nconst useEffectDarkMode = () => {\n  const [themeState, setThemeState] = React.useState({\n    dark: false,\n    hasThemeMounted: false\n  });\n  React.useEffect(() => {\n    const lsDark = localStorage.getItem(\"dark\") === \"true\";\n    setThemeState({ dark: lsDark, hasThemeMounted: true });\n  }, []);\n\n  return [themeState, setThemeState];\n};\n\nconst ThemeProvider = ({ children }) => {\n  const [themeState, setThemeState] = useEffectDarkMode();\n\n  if (!themeState.hasThemeMounted) {\n    return <div />;\n  }\n\n  const toggle = () => {\n    const dark = !themeState.dark;\n    localStorage.setItem(\"dark\", JSON.stringify(dark));\n    setThemeState({ ...themeState, dark });\n  };\n\n  const computedTheme = themeState.dark ? theme(\"dark\") : theme(\"light\");\n\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <ThemeContext.Provider\n        value={{\n          dark: themeState.dark,\n          toggle\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    </EmotionThemeProvider>\n  );\n};\n\nexport { ThemeProvider, useTheme };\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport configureStore from '../store'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport TodoInput from '../components/TodoInput'\nimport TodoList from '../components/TodoList'\nimport ViewModeButtons from '../components/ViewModeButtons'\nimport { useTheme } from '../theme/ThemeContext'\nimport styled from '@emotion/styled';\nimport style from './assets/App.module.scss'\nimport Button from '../vendor/Button'\n\nconst {store, persistor} = configureStore()\nconst Wrapper = styled(\"div\")`\n  background: ${props => props.theme.background};\n  min-width: 100vw;\n  min-height: 100vh;\n  * {\n    color: ${props => props.theme.text};\n  }\n`;\n\nfunction App() {\n  const themeState = useTheme();\n\n  return (\n    <Wrapper>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <div className={style.app__container}>\n            <TodoInput />\n            <TodoList />\n            <ViewModeButtons />\n            <Button onClick={() => themeState.toggle()}>\n              {themeState.dark ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"}\n            </Button>\n          </div>\n        </PersistGate>\n      </Provider>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport { ThemeProvider } from './theme/ThemeContext';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}